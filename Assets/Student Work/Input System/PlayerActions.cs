//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.10.0
//     from Assets/Student Work/Input System/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""INGAME"",
            ""id"": ""ba40b0e6-5623-4dd1-af70-1dc206bce718"",
            ""actions"": [
                {
                    ""name"": ""MOVE"",
                    ""type"": ""Value"",
                    ""id"": ""ed96b428-5133-4c54-b615-1ff294da8ec6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LOOK"",
                    ""type"": ""Value"",
                    ""id"": ""1171c45c-d415-4316-8a60-0db5d96a0c5e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ATTACK"",
                    ""type"": ""Button"",
                    ""id"": ""682aeff1-72cd-4253-b338-44f49f1cf807"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0992f533-cb7e-4285-a312-3b3b09d24a05"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LOOK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b70cf3c9-ff1c-4979-a64e-a24279daa9dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7d30aff1-6245-4100-ae18-fe1477d9c4d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e2ab708-8d6c-4eaa-ac3d-22ab10580149"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd4dfd47-fa8a-487b-92a7-ba1bc56cbbc1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""be615283-9a76-4297-aac3-ede39ce55956"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be12339d-dc00-478c-b040-35b331f61e20"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ATTACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // INGAME
        m_INGAME = asset.FindActionMap("INGAME", throwIfNotFound: true);
        m_INGAME_MOVE = m_INGAME.FindAction("MOVE", throwIfNotFound: true);
        m_INGAME_LOOK = m_INGAME.FindAction("LOOK", throwIfNotFound: true);
        m_INGAME_ATTACK = m_INGAME.FindAction("ATTACK", throwIfNotFound: true);
    }

    ~@PlayerActions()
    {
        UnityEngine.Debug.Assert(!m_INGAME.enabled, "This will cause a leak and performance issues, PlayerActions.INGAME.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // INGAME
    private readonly InputActionMap m_INGAME;
    private List<IINGAMEActions> m_INGAMEActionsCallbackInterfaces = new List<IINGAMEActions>();
    private readonly InputAction m_INGAME_MOVE;
    private readonly InputAction m_INGAME_LOOK;
    private readonly InputAction m_INGAME_ATTACK;
    public struct INGAMEActions
    {
        private @PlayerActions m_Wrapper;
        public INGAMEActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVE => m_Wrapper.m_INGAME_MOVE;
        public InputAction @LOOK => m_Wrapper.m_INGAME_LOOK;
        public InputAction @ATTACK => m_Wrapper.m_INGAME_ATTACK;
        public InputActionMap Get() { return m_Wrapper.m_INGAME; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(INGAMEActions set) { return set.Get(); }
        public void AddCallbacks(IINGAMEActions instance)
        {
            if (instance == null || m_Wrapper.m_INGAMEActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_INGAMEActionsCallbackInterfaces.Add(instance);
            @MOVE.started += instance.OnMOVE;
            @MOVE.performed += instance.OnMOVE;
            @MOVE.canceled += instance.OnMOVE;
            @LOOK.started += instance.OnLOOK;
            @LOOK.performed += instance.OnLOOK;
            @LOOK.canceled += instance.OnLOOK;
            @ATTACK.started += instance.OnATTACK;
            @ATTACK.performed += instance.OnATTACK;
            @ATTACK.canceled += instance.OnATTACK;
        }

        private void UnregisterCallbacks(IINGAMEActions instance)
        {
            @MOVE.started -= instance.OnMOVE;
            @MOVE.performed -= instance.OnMOVE;
            @MOVE.canceled -= instance.OnMOVE;
            @LOOK.started -= instance.OnLOOK;
            @LOOK.performed -= instance.OnLOOK;
            @LOOK.canceled -= instance.OnLOOK;
            @ATTACK.started -= instance.OnATTACK;
            @ATTACK.performed -= instance.OnATTACK;
            @ATTACK.canceled -= instance.OnATTACK;
        }

        public void RemoveCallbacks(IINGAMEActions instance)
        {
            if (m_Wrapper.m_INGAMEActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IINGAMEActions instance)
        {
            foreach (var item in m_Wrapper.m_INGAMEActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_INGAMEActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public INGAMEActions @INGAME => new INGAMEActions(this);
    public interface IINGAMEActions
    {
        void OnMOVE(InputAction.CallbackContext context);
        void OnLOOK(InputAction.CallbackContext context);
        void OnATTACK(InputAction.CallbackContext context);
    }
}
